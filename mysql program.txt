Create table DEPT
(
DEPTNO int(2),
DNAME varchar(15),
LOC varchar(10)
);
desc DEPT;
Insert  into  DEPT  values
(10, 'ACCOUNTING', 'NEW YORK'),
(20, 'RESEARCH', 'DALLAS'),
(30,'SALES', 'CHICAGO'),
(40, 'OPERATIONS', 'BOSTON');


Select * from DEPT;


___________________________________________________________________________________________
Create table EMP 
(
EMPNO int(4),
ENAME varchar(10),
JOB varchar(9),
HIREDATE date,
SAL float(7,2),
COMM float(7,2),
DEPTNO int(2)
);
 desc EMP;
Insert  into  EMP  values
(7839, 'KING' ,'MANAGER', '1991-11-17' ,5000 ,NULL, 10),
(7698 ,'BLAKE', 'CLERK' ,'1981-05-01' ,2850 ,NULL ,30),
(7782, 'CLARK' ,'MANAGER', '1981-06-09', '2450', NULL, 10),
(7566 ,'JONES', 'CLERK' ,'1981-04-02', 2975 ,NULL, 20),
(7654, 'MARTIN', 'SALESMAN' ,'1981-09-28', 1250, 1400, 30),
(7499, 'ALLEN' ,'SALESMAN', '1981-02-20' ,1600, 300, 30);

select * from EMP;

#-----------------------------------------------------------------------------------

/*Write SELECT statements to achieve the following:-
3. Display all the employees where SAL between 2500 and 5000 (inclusive of both).
4. Display all the ENAMEs in descending order of ENAME.
5. Display all the JOBs in lowercase.
6. Display the ENAMEs and the lengths of the ENAMEs.
7. Display the DEPTNO and the count of employees who belong to that DEPTNO .
8. Display the DNAMEs and the ENAMEs who belong to that DNAME.
9. Display the position at which the string ‘AR’ occurs in the ename.
10. Display the HRA for each employee given that HRA is 20% of SAL.*/

#---------------------------------------------------------------------------------------------

#3. Display all the employees where SAL between 2500 and 5000 (inclusive of both).
select sal from EMP
where SAL between 2500 AND  5000;

#---------------------------------------------------------------------------------------------

#4. Display all the ENAMEs in descending order of ENAME.

select * from EMP 
ORDER BY ENAME DESC;

#---------------------------------------------------------------------------------------------
#5. Display all the JOBs in lowercase.
SELECT LOWER(JOB) FROM EMP;

#---------------------------------------------------------------------------------------------

#6. Display the ENAMEs and the lengths of the ENAMEs.
SELECT ENAME,LENGTH(ENAME) AS LENGTH FROM EMP;

#----------------------------------------------------------------------------------------------
#7. Display the DEPTNO and the count of employees who belong to that DEPTNO .
SELECT DEPTNO,COUNT(DEPTNO) FROM EMP
GROUP BY DEPTNO;

#------------------------------------------------------------------------------------------------
#8. Display the DNAMEs and the ENAMEs who belong to that DNAME.
SELECT DNAME , ENAME FROM emp,dept 
WHERE emp.deptno = dept.deptno; 

#-------------------------------------------------------------------------------------------------

#9. Display the position at which the string ‘AR’ occurs in the ename.
SELECT ENAME FROM EMP 
WHERE  ENAME LIKE '%AR%';

#------------------------------------------------------------------------------------------------

#10. Display the HRA for each employee given that HRA is 20% of SAL.*/
SELECT ENAME,sal , SAL*(1.20) AS HRA FROM EMP;

#------------------------------------------------------------------------------------------------

________________________________________________________________________________________________________________________


/*1. Write a stored procedure by the name of PROC1 that accepts two varchar strings as parameters. Your procedure should then
determine if the first varchar string exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 = ‘CDAC, 
then string1 exists inside string2. The stored procedure should insert the appropriate message into a suitable TEMPP output table. 
Calling program for the stored procedure need not be written.
2. Create a stored function by the name of FUNC1 to take three parameters, the sides of a triangle.
 The function should return a Boolean value:- TRUE if the triangle is valid, FALSE otherwise
 . A triangle is valid if the length of each side is less than the sum of the lengths of the other two sides. 
 Check if the dimensions entered can form a valid triangle. Calling program for the stored function need not be written.*/
 
 
 /*1. Write a stored procedure by the name of PROC1 that accepts two varchar strings as parameters. Your procedure should then
determine if the first varchar string exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 = ‘CDAC, 
then string1 exists inside string2. The stored procedure should insert the appropriate message into a suitable TEMPP output table. 
Calling program for the stored procedure need not be written. */

#---------------------------------------------------------------------------------------------------------------------------
create table Tempp
(
message varchar(100)
);

delimiter //
create procedure PROC1(String1 varchar(40), String2 varchar(40))
begin

	if(instr(string1,string2)>0 or instr(string2,string1)>0 )then
    insert into tempp values("The first String will be existed in the second String");
    else
    
    insert into tempp values("The First String not exist in second String");
    end if;
    end; //
    delimiter ;
    
    drop procedure PROC1;
    call PROC1('DAC','CDAC');
    select * from tempp;
    
    #--------------------------------------------------------------------------------------------------------------


______________________________________________________________________________________________________________________________________________________


/*2. Create a stored function by the name of FUNC1 to take three parameters, the sides of a triangle.
 The function should return a Boolean value:- TRUE if the triangle is valid, FALSE otherwise
 . A triangle is valid if the length of each side is less than the sum of the lengths of the other two sides. 
 Check if the dimensions entered can form a valid triangle. Calling program for the stored function need not be written.*/
 
 
 create table temppp
 (
 Statement varchar(50)
 );
 #-------------------------------------------------------------------------------------------------------------
 delimiter //
 create function FUNC1(x int, y int, z int)
 returns boolean
 deterministic
 begin
		if((x+y)>z) then if ((x+z)>y) then if ((y+z)>x)  then
        return true;
        end if;
        end if;
        else
        return false;
        end if;
 
 
 end; //
 delimiter ;
 
 drop function FUNC1;
 #------------------------------------------------------------------------------------------------
 delimiter //
 create procedure traingle(x int,y int, z int)
 begin
		declare a varchar (20);
        set a = FUNC1(x,y,z);
        insert into temppp values(x);
 
 end; //
 delimiter ;
drop procedure  traingle;
#--------------------------------------------------------------------------------------------------------
 call traingle(1,2,3);
  call traingle(2,4,7);
   call traingle(8,4,11);
 
 select * from temppp;

__________________________________________________________________________________________________________________________________________

